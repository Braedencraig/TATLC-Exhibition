{"ast":null,"code":"import React from \"react\";\nimport * as THREE from \"three\";\nexport default function Test() {\n  //Set up scene, camera, and renderer\n  var scene = new THREE.Scene();\n  var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000); //   var renderer = new THREE.CanvasRenderer();\n  //   renderer.setClearColor(0xf0f0f0);\n  //   renderer.setSize(window.innerWidth, window.innerHeight);\n  //   document.body.appendChild(renderer.domElement);\n\n  var video = document.createElement(\"video\");\n  video.src = \"https://pchen66.github.io/Panolens/examples/asset/textures/video/1941-battle-low.mp4\";\n  video.load();\n  video.play(); //make your video canvas\n\n  var videocanvas = document.createElement(\"canvas\");\n  var videocanvasctx = videocanvas.getContext(\"2d\"); //set its size\n\n  videocanvas.width = 640;\n  videocanvas.height = 480; //draw a black rectangle so that your spheres don't start out transparent\n\n  videocanvasctx.fillStyle = \"#000000\";\n  videocanvasctx.fillRect(0, 0, 640, 480); //add canvas to new texture\n\n  var spheretexture = new THREE.Texture(videocanvas); //add texture to material that will be wrapped around the sphere\n\n  var material = new THREE.MeshBasicMaterial({\n    map: spheretexture,\n    overdraw: 0.5\n  }); //Use whatever values you were using for the sizes of the spheres before\n\n  var sphere = new THREE.SphereGeometry(5, 32, 32); //make a mesh from the material and the geometry (the sphere)\n\n  var sphereMesh = new THREE.Mesh(sphere, material); //Run your render function, checking the video for data and writing it to the canvas if there is any (this assumes you already have your video on the page and its element saved to the variable 'video'\n\n  function render() {\n    //check for vid data\n    if (video.readyState === video.HAVE_ENOUGH_DATA) {\n      //draw video to canvas starting from upper left corner\n      videocanvasctx.drawImage(video, 0, 0); //tell texture object it needs to be updated\n\n      spheretexture.needsUpdate = true;\n    }\n\n    renderer.render(scene, camera); //Same as how you always render a 3js scene\n\n    window.requestAnimationFrame(render); //When finished rendering, ask to render again on the next frame\n  }\n\n  window.requestAnimationFrame(render); //Start render loop\n}\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/bcraig/Desktop/test/src/pages/Test.js"],"names":["React","THREE","Test","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","video","document","createElement","src","load","play","videocanvas","videocanvasctx","getContext","width","height","fillStyle","fillRect","spheretexture","Texture","material","MeshBasicMaterial","map","overdraw","sphere","SphereGeometry","sphereMesh","Mesh","render","readyState","HAVE_ENOUGH_DATA","drawImage","needsUpdate","renderer","requestAnimationFrame"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B;AACA,MAAIC,KAAK,GAAG,IAAIF,KAAK,CAACG,KAAV,EAAZ;AACA,MAAIC,MAAM,GAAG,IAAIJ,KAAK,CAACK,iBAAV,CACX,EADW,EAEXC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAFhB,EAGX,CAHW,EAIX,KAJW,CAAb,CAH6B,CAU7B;AACA;AACA;AACA;;AAEA,MAAIC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAZ;AACAF,EAAAA,KAAK,CAACG,GAAN,GACE,sFADF;AAEAH,EAAAA,KAAK,CAACI,IAAN;AACAJ,EAAAA,KAAK,CAACK,IAAN,GAnB6B,CAqB7B;;AACA,MAAIC,WAAW,GAAGL,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAlB;AACA,MAAIK,cAAc,GAAGD,WAAW,CAACE,UAAZ,CAAuB,IAAvB,CAArB,CAvB6B,CAyB7B;;AACAF,EAAAA,WAAW,CAACG,KAAZ,GAAoB,GAApB;AACAH,EAAAA,WAAW,CAACI,MAAZ,GAAqB,GAArB,CA3B6B,CA6B7B;;AACAH,EAAAA,cAAc,CAACI,SAAf,GAA2B,SAA3B;AACAJ,EAAAA,cAAc,CAACK,QAAf,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,GAA9B,EAAmC,GAAnC,EA/B6B,CAiC7B;;AACA,MAAIC,aAAa,GAAG,IAAItB,KAAK,CAACuB,OAAV,CAAkBR,WAAlB,CAApB,CAlC6B,CAoC7B;;AACA,MAAIS,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,iBAAV,CAA4B;AACzCC,IAAAA,GAAG,EAAEJ,aADoC;AAEzCK,IAAAA,QAAQ,EAAE;AAF+B,GAA5B,CAAf,CArC6B,CA0C7B;;AACA,MAAIC,MAAM,GAAG,IAAI5B,KAAK,CAAC6B,cAAV,CAAyB,CAAzB,EAA4B,EAA5B,EAAgC,EAAhC,CAAb,CA3C6B,CA6C7B;;AACA,MAAIC,UAAU,GAAG,IAAI9B,KAAK,CAAC+B,IAAV,CAAeH,MAAf,EAAuBJ,QAAvB,CAAjB,CA9C6B,CAgD7B;;AAEA,WAASQ,MAAT,GAAkB;AAChB;AACA,QAAIvB,KAAK,CAACwB,UAAN,KAAqBxB,KAAK,CAACyB,gBAA/B,EAAiD;AAC/C;AACAlB,MAAAA,cAAc,CAACmB,SAAf,CAAyB1B,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC,EAF+C,CAG/C;;AACAa,MAAAA,aAAa,CAACc,WAAd,GAA4B,IAA5B;AACD;;AACDC,IAAAA,QAAQ,CAACL,MAAT,CAAgB9B,KAAhB,EAAuBE,MAAvB,EARgB,CAQgB;;AAEhCE,IAAAA,MAAM,CAACgC,qBAAP,CAA6BN,MAA7B,EAVgB,CAUsB;AACvC;;AAED1B,EAAAA,MAAM,CAACgC,qBAAP,CAA6BN,MAA7B,EA/D6B,CA+DS;AACvC;KAhEuB/B,I","sourcesContent":["import React from \"react\";\nimport * as THREE from \"three\";\n\nexport default function Test() {\n  //Set up scene, camera, and renderer\n  var scene = new THREE.Scene();\n  var camera = new THREE.PerspectiveCamera(\n    45,\n    window.innerWidth / window.innerHeight,\n    1,\n    10000\n  );\n\n  //   var renderer = new THREE.CanvasRenderer();\n  //   renderer.setClearColor(0xf0f0f0);\n  //   renderer.setSize(window.innerWidth, window.innerHeight);\n  //   document.body.appendChild(renderer.domElement);\n\n  var video = document.createElement(\"video\");\n  video.src =\n    \"https://pchen66.github.io/Panolens/examples/asset/textures/video/1941-battle-low.mp4\";\n  video.load();\n  video.play();\n\n  //make your video canvas\n  var videocanvas = document.createElement(\"canvas\");\n  var videocanvasctx = videocanvas.getContext(\"2d\");\n\n  //set its size\n  videocanvas.width = 640;\n  videocanvas.height = 480;\n\n  //draw a black rectangle so that your spheres don't start out transparent\n  videocanvasctx.fillStyle = \"#000000\";\n  videocanvasctx.fillRect(0, 0, 640, 480);\n\n  //add canvas to new texture\n  var spheretexture = new THREE.Texture(videocanvas);\n\n  //add texture to material that will be wrapped around the sphere\n  var material = new THREE.MeshBasicMaterial({\n    map: spheretexture,\n    overdraw: 0.5,\n  });\n\n  //Use whatever values you were using for the sizes of the spheres before\n  var sphere = new THREE.SphereGeometry(5, 32, 32);\n\n  //make a mesh from the material and the geometry (the sphere)\n  var sphereMesh = new THREE.Mesh(sphere, material);\n\n  //Run your render function, checking the video for data and writing it to the canvas if there is any (this assumes you already have your video on the page and its element saved to the variable 'video'\n\n  function render() {\n    //check for vid data\n    if (video.readyState === video.HAVE_ENOUGH_DATA) {\n      //draw video to canvas starting from upper left corner\n      videocanvasctx.drawImage(video, 0, 0);\n      //tell texture object it needs to be updated\n      spheretexture.needsUpdate = true;\n    }\n    renderer.render(scene, camera); //Same as how you always render a 3js scene\n\n    window.requestAnimationFrame(render); //When finished rendering, ask to render again on the next frame\n  }\n\n  window.requestAnimationFrame(render); //Start render loop\n}\n"]},"metadata":{},"sourceType":"module"}