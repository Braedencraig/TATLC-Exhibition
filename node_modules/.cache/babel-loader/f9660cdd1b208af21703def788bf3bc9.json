{"ast":null,"code":"var _jsxFileName = \"/Users/bcraig/Desktop/test/src/pages/Guided.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Guided() {\n  // var panorama, viewer, typed, typed;\n  //     var meterInfospot, valveInfospot, seatInfospot, topboxInfospot, endingInfospot;\n  //     var progressElement = document.querySelector( '#progress' );\n  //     var tweeningDelay = 300, typeStartDelay = 1000, typeSpeed = 50;\n  //     var paragraphs = {\n  //       welcome: [ 'Panolens Presents', 'A Journey to a <strong>Train</strong>', 'Here we go' ],\n  //       meter: [ 'One of the common meter that you can see on a train', 'it is not specially eye-catching but it just can get your attention', 'it indicates how fast the train is currently going', 'Let us continue' ],\n  //       valve: [ 'A Valve', 'solid looking and quite decent color', 'here shows the evidence that time would leaves marks on everything', 'same thing applies to our face...' ],\n  //       seat: [ 'Alright. Here we have a seat. The green pad looks quite comfortable', 'when you are on a train', 'OK. Move on to next one' ],\n  //       box: [ 'There is a box over there', 'probably some fuse or electronic devices', 'Hmmmm............', 'Anyway', 'Let\\'s keep moving' ],\n  //       ending: [ 'This is our last stop', 'Please continue your journey with this wonder train...' ]\n  //     };\n  //     // Patch for typed.js of cutting back-to-back words\n  //     for ( var section in paragraphs ) {\n  //       if ( paragraphs.hasOwnProperty( section ) ) {\n  //         paragraphs[ section ].unshift( '' );\n  //         paragraphs[ section ].push( '' );\n  //       }\n  //     }\n  //     function delayExecute ( func, delay ) {\n  //       setTimeout( func, delay );\n  //     }\n  //     function onLoad () {\n  //       type( paragraphs.welcome, onWelcomeComplete, 2000 );\n  //     }\n  //     function onEnter ( event ) {\n  //       progressElement.style.width = 0;\n  //       progressElement.classList.remove( 'finish' );\n  //     }\n  //     function onProgress ( event ) {\n  //       var progress = event.progress.loaded / event.progress.total * 100;\n  //       progressElement.style.width = progress + '%';\n  //       if ( progress === 100 ) {\n  //         progressElement.classList.add( 'finish' );\n  //       }\n  //     }\n  //     function onWelcomeComplete () {\n  //       delayExecute( meterInfospot.focus.bind( meterInfospot ), tweeningDelay );\n  //       type( paragraphs.meter, onMeterTourComplete );\n  //     }\n  //     function onMeterTourComplete () {\n  //       delayExecute( valveInfospot.focus.bind( valveInfospot ), tweeningDelay );\n  //       type( paragraphs.valve, onValveTourComplete );\n  //     }\n  //     function onValveTourComplete () {\n  //       delayExecute( seatInfospot.focus.bind( seatInfospot ), tweeningDelay );\n  //       type( paragraphs.seat, onSeatTourComplete );\n  //     }\n  //     function onSeatTourComplete () {\n  //       delayExecute( topboxInfospot.focus.bind( topboxInfospot ), tweeningDelay );\n  //       type( paragraphs.box, onTopboxTourComplete );\n  //     }\n  //     function onTopboxTourComplete () {\n  //       delayExecute( endingInfospot.focus.bind( endingInfospot ), tweeningDelay );\n  //       type( paragraphs.ending, function(){ viewer.OrbitControls.enabled = true; } );\n  //     }\n  //     function type ( stringArray, onComplete, startDelay ) {\n  //       onComplete = onComplete || function(){};\n  //       startDelay = startDelay >= 0 ? startDelay : typeStartDelay;\n  //       typed = new Typed( \"#typed\", {\n  //         strings: stringArray,\n  //         typeSpeed: typeSpeed,\n  //         showCursor: false,\n  //         startDelay: startDelay,\n  //         onComplete: onComplete\n  //       });\n  //     }\n  //     // Infospots\n  //     meterInfospot = new PANOLENS.Infospot();\n  //     valveInfospot = new PANOLENS.Infospot();\n  //     seatInfospot = new PANOLENS.Infospot();\n  //     topboxInfospot = new PANOLENS.Infospot();\n  //     endingInfospot = new PANOLENS.Infospot( 10e-7 );  // Make it not visible\n  //     meterInfospot.position.set( 4610.04, 1280.07, 1431.29 );\n  //     valveInfospot.position.set( 4637.61, -798.12, -1671.24 );\n  //     seatInfospot.position.set( 1934.61, -2611.69, -3792.91 );\n  //     topboxInfospot.position.set( -3348.82, 3705.92, 45.54 );\n  //     endingInfospot.position.set( -3461.4, -3592.37, -241.38 );\n  //     meterInfospot.addHoverText( 'Speedometer', 50 );\n  //     valveInfospot.addHoverText( 'Valve', 50 );\n  //     seatInfospot.addHoverText( 'Seat', 50 );\n  //     topboxInfospot.addHoverText( 'Box', 50 );\n  //     // Panorama\n  //     panorama = new PANOLENS.ImagePanorama( 'asset/textures/equirectangular/dusty9000x4500.jpg' );\n  //     panorama.addEventListener( 'progress', onProgress );\n  //     panorama.addEventListener( 'load', onLoad );\n  //     panorama.addEventListener( 'enter', onEnter );\n  //     panorama.add( meterInfospot, valveInfospot, seatInfospot, topboxInfospot, endingInfospot );\n  //     // Viewer\n  //     viewer = new PANOLENS.Viewer( { controlBar: false, initialLookAt: new THREE.Vector3( 0, 0, 5000 ) } );\n  //     viewer.OrbitControls.enabled = false;\n  //     viewer.add( panorama );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"GUIDED\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 10\n  }, this);\n}\n_c = Guided;\n\nvar _c;\n\n$RefreshReg$(_c, \"Guided\");","map":{"version":3,"sources":["/Users/bcraig/Desktop/test/src/pages/Guided.js"],"names":["React","Guided"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAC/B;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;KAhJuBA,M","sourcesContent":["import React from \"react\";\n\nexport default function Guided() {\n  // var panorama, viewer, typed, typed;\n\n  //     var meterInfospot, valveInfospot, seatInfospot, topboxInfospot, endingInfospot;\n\n  //     var progressElement = document.querySelector( '#progress' );\n\n  //     var tweeningDelay = 300, typeStartDelay = 1000, typeSpeed = 50;\n\n  //     var paragraphs = {\n\n  //       welcome: [ 'Panolens Presents', 'A Journey to a <strong>Train</strong>', 'Here we go' ],\n  //       meter: [ 'One of the common meter that you can see on a train', 'it is not specially eye-catching but it just can get your attention', 'it indicates how fast the train is currently going', 'Let us continue' ],\n  //       valve: [ 'A Valve', 'solid looking and quite decent color', 'here shows the evidence that time would leaves marks on everything', 'same thing applies to our face...' ],\n  //       seat: [ 'Alright. Here we have a seat. The green pad looks quite comfortable', 'when you are on a train', 'OK. Move on to next one' ],\n  //       box: [ 'There is a box over there', 'probably some fuse or electronic devices', 'Hmmmm............', 'Anyway', 'Let\\'s keep moving' ],\n  //       ending: [ 'This is our last stop', 'Please continue your journey with this wonder train...' ]\n\n  //     };\n\n  //     // Patch for typed.js of cutting back-to-back words\n  //     for ( var section in paragraphs ) {\n\n  //       if ( paragraphs.hasOwnProperty( section ) ) {\n\n  //         paragraphs[ section ].unshift( '' );\n  //         paragraphs[ section ].push( '' );\n\n  //       }\n\n  //     }\n\n  //     function delayExecute ( func, delay ) {\n\n  //       setTimeout( func, delay );\n\n  //     }\n\n  //     function onLoad () {\n\n  //       type( paragraphs.welcome, onWelcomeComplete, 2000 );\n\n  //     }\n\n  //     function onEnter ( event ) {\n\n  //       progressElement.style.width = 0;\n  //       progressElement.classList.remove( 'finish' );\n\n  //     }\n\n  //     function onProgress ( event ) {\n\n  //       var progress = event.progress.loaded / event.progress.total * 100;\n  //       progressElement.style.width = progress + '%';\n  //       if ( progress === 100 ) {\n  //         progressElement.classList.add( 'finish' );\n  //       }\n\n  //     }\n\n  //     function onWelcomeComplete () {\n\n  //       delayExecute( meterInfospot.focus.bind( meterInfospot ), tweeningDelay );\n  //       type( paragraphs.meter, onMeterTourComplete );\n\n  //     }\n\n  //     function onMeterTourComplete () {\n\n  //       delayExecute( valveInfospot.focus.bind( valveInfospot ), tweeningDelay );\n  //       type( paragraphs.valve, onValveTourComplete );\n\n  //     }\n\n  //     function onValveTourComplete () {\n\n  //       delayExecute( seatInfospot.focus.bind( seatInfospot ), tweeningDelay );\n  //       type( paragraphs.seat, onSeatTourComplete );\n\n  //     }\n\n  //     function onSeatTourComplete () {\n\n  //       delayExecute( topboxInfospot.focus.bind( topboxInfospot ), tweeningDelay );\n  //       type( paragraphs.box, onTopboxTourComplete );\n\n  //     }\n\n  //     function onTopboxTourComplete () {\n\n  //       delayExecute( endingInfospot.focus.bind( endingInfospot ), tweeningDelay );\n  //       type( paragraphs.ending, function(){ viewer.OrbitControls.enabled = true; } );\n\n  //     }\n\n  //     function type ( stringArray, onComplete, startDelay ) {\n\n  //       onComplete = onComplete || function(){};\n  //       startDelay = startDelay >= 0 ? startDelay : typeStartDelay;\n\n  //       typed = new Typed( \"#typed\", {\n\n  //         strings: stringArray,\n  //         typeSpeed: typeSpeed,\n  //         showCursor: false,\n  //         startDelay: startDelay,\n  //         onComplete: onComplete\n\n  //       });\n\n  //     }\n\n  //     // Infospots\n  //     meterInfospot = new PANOLENS.Infospot();\n  //     valveInfospot = new PANOLENS.Infospot();\n  //     seatInfospot = new PANOLENS.Infospot();\n  //     topboxInfospot = new PANOLENS.Infospot();\n  //     endingInfospot = new PANOLENS.Infospot( 10e-7 );  // Make it not visible\n\n  //     meterInfospot.position.set( 4610.04, 1280.07, 1431.29 );\n  //     valveInfospot.position.set( 4637.61, -798.12, -1671.24 );\n  //     seatInfospot.position.set( 1934.61, -2611.69, -3792.91 );\n  //     topboxInfospot.position.set( -3348.82, 3705.92, 45.54 );\n  //     endingInfospot.position.set( -3461.4, -3592.37, -241.38 );\n\n  //     meterInfospot.addHoverText( 'Speedometer', 50 );\n  //     valveInfospot.addHoverText( 'Valve', 50 );\n  //     seatInfospot.addHoverText( 'Seat', 50 );\n  //     topboxInfospot.addHoverText( 'Box', 50 );\n\n  //     // Panorama\n  //     panorama = new PANOLENS.ImagePanorama( 'asset/textures/equirectangular/dusty9000x4500.jpg' );\n  //     panorama.addEventListener( 'progress', onProgress );\n  //     panorama.addEventListener( 'load', onLoad );\n  //     panorama.addEventListener( 'enter', onEnter );\n  //     panorama.add( meterInfospot, valveInfospot, seatInfospot, topboxInfospot, endingInfospot );\n\n  //     // Viewer\n  //     viewer = new PANOLENS.Viewer( { controlBar: false, initialLookAt: new THREE.Vector3( 0, 0, 5000 ) } );\n  //     viewer.OrbitControls.enabled = false;\n  //     viewer.add( panorama );\n\n  return <div>GUIDED</div>;\n}\n"]},"metadata":{},"sourceType":"module"}